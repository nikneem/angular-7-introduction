Introduction to forms in Angular, Template driven & Reactive

Start adding filters
ng g module shared/filters
ng g component shared/filters/name-filters

import material module in the filters module
import forms module in the filters module

add filter value to the component
  @Input() filterValue: string;
  @Output() filterChanged: EventEmitter<string> = new EventEmitter();

  update(value: string) {
    this.filterChanged.emit(value);
  }
  clearFilter() {
    this.filterChanged.emit('');
    this.filterValue = '';
  }

Add HTML to the filter
<mat-form-field class="example-full-width">
  <input
    matInput
    #nameFilter
    type="text"
    placeholder="Search for name"
    [(ngModel)]="filterValue"
    (keyup.enter)="update(nameFilter.value)"
    (blur)="update(nameFilter.value)"
  />
  <button
    mat-button
    *ngIf="filterValue"
    matSuffix
    mat-icon-button
    aria-label="Clear"
    (click)="clearFilter()"
  >
    <mat-icon>info</mat-icon>
  </button>
</mat-form-field>

Update home HTML
<app-name-filter (filterChanged)="setNameFilter($event)"></app-name-filter>

Update home Component:
 private filter: ContactFilterDto;

   constructor(private service: ContactinfoService) {
    this.filter = new ContactFilterDto({ pageSize: 5, page: 1 });
  }

  setNameFilter(value) {
    this.filter.name = value;
    this.loadContacts();
  }

  private loadContacts() {
    const self = this;
    self.service.get(self.filter).subscribe(data => {
      self.contactData = data;
    });
  }

  Explain querystring params

  Allow to listen to querystring params
    ngOnInit() {
    this.activatedRoute.queryParams.subscribe(params => {
      this.filter = Object.assign(this.filter, params);
      if (this.filter.page <= 1) {
        this.filter.page = 1;
      }
      if (this.filter.pageSize <= 1) {
        this.filter.pageSize = 5;
      }
      this.loadContacts();
    });
  }

Update shizzle so querystring works OK

  setNameFilter(value) {
    this.filter.name = value === '' ? undefined : value;
    this.updateParams();
    this.loadContacts();
  }
    ngOnInit() {
    this.activatedRoute.queryParams.subscribe(params => {
      this.filter = Object.assign(this.filter, params);
      if (this.filter.page <= 1) {
        this.filter.page = 1;
      }
      if (this.filter.pageSize <= 1) {
        this.filter.pageSize = 5;
      }
    });
    this.loadContacts();
  }

    updateParams() {
    const p: Params = {
      name: this.filter.name,
      address: this.filter.address,
      dateFrom: this.filter.dateFrom,
      dateTo: this.filter.dateTo,
      sort: this.filter.sort,
      page: this.filter.page,
      pageSize: this.filter.pageSize
    };

    this.router.navigate([], {
      relativeTo: this.activatedRoute,
      queryParams: p,
      queryParamsHandling: 'merge' // remove to replace all query params by provided
    });
  }